# -*- coding: utf-8 -*-
"""mp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KLyI7_KQtT16-xPbrbK8rm9uptaR_Ipi
"""


# -*- coding: utf-8 -*-
"""mp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLyI7_KQtT16-xPbrbK8rm9uptaR_Ipi
"""

# -*- coding: utf-8 -*-
"""mp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLyI7_KQtT16-xPbrbK8rm9uptaR_Ipi
"""

import subprocess
import os
def install_bettercap():
    try:
        # Execute shell script to install Bettercap
        subprocess.run(["bash", "Bettercap.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing Bettercap:", e)
def run_bettercap():
    try:
        # Execute Bettercap command using subprocess
        subprocess.run(["Bettercap"], check=True)
    except FileNotFoundError:
        print("Bettercap is not installed. Installing...")
        install_bettercap()
        print("Bettercap installed successfully. Running...")
        run_bettercap()
    except Exception as e:
        # Handle any other errors
        print("Error running Bettercap:", e)

"""def install_sherlock():
    try:
        # Execute shell script to install Sherlock
        subprocess.run(["bash", "Sherlock.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing Sherlock:", e)

def run_sherlock():
    try:
        # Execute Sherlock command using subprocess
        subprocess.run(["python3", "sherlock/sherlock.py"], check=True)
    except FileNotFoundError:
        print("Sherlock is not installed. Installing...")
        install_sherlock()
        print("Sherlock installed successfully. Running...")
        run_sherlock()
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error running Sherlock:", e)"""

"""def install_theharvester():
    try:
        # Execute shell script to install TheHarvester
        subprocess.run(["bash", "theHarvester.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing TheHarvester:", e)"""

"""def run_theharvester():
    try:
        # Execute TheHarvester command using subprocess
        subprocess.run(["theharvester", "-d", "example.com", "-l", "100", "-b", "google"], check=True)
    except FileNotFoundError:
        print("TheHarvester is not installed. Installing...")
        subprocess.run(["bash", "theHarvester.sh"], check=True)
        print("TheHarvester installed successfully. Running...")
        subprocess.run(["theharvester", "-d", "example.com", "-l", "100", "-b", "google"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error running TheHarvester:", e)"""


"""def install_theharvester():
    try:
        # Execute shell script to install TheHarvester
        subprocess.run(["bash", "theHarvester.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing TheHarvester:", e)

def find_theharvester_executable(installation_dir):
    # Search for TheHarvester executable within the installation directory
    for root, dirs, files in os.walk(installation_dir):
        for file in files:
            if file == "theharvester":
                return os.path.join(root, file)
    return None"""

"""def run_theharvester():
    try:
        # Check if TheHarvester is installed
        result = subprocess.run(["which", "theHarvester"], stdout=subprocess.PIPE)
        if result.returncode != 0:
            print("TheHarvester is not installed. Installing...")
            install_theharvester()
            print("TheHarvester installed successfully.")

        # Find TheHarvester executable
        theharvester_executable = find_theharvester_executable("/path/to/theharvester/installation/dir")
        if theharvester_executable:
            # Execute TheHarvester command using subprocess
            subprocess.run([theharvester_executable, "-d", "example.com", "-l", "100", "-b", "google"], check=True)
        else:
            print("Error: TheHarvester executable not found.")
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error running TheHarvester:", e)"""


def install_linuxexploitsuggester():
    try:
        # Execute shell script to install Linux Exploit Suggester
        subprocess.run(["bash", "exploitsuggester.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing exploiting suggester:", e)
def run_linuxexploitsuggester():
    try:
        # Execute Linux Exploit Suggester command using subprocess
        subprocess.run(["Linux exploit suggester"], check=True)
    except FileNotFoundError:
        print("Linux Exploit Suggester is not installed. Installing...")
        install_()
        print("Linux Exploit suggester installed successfully. Running...")
        run_bettercap()
    except Exception as e:
        # Handle any other errors
        print("Error running exploit suggester :", e)


def install_dirb():
    try:
        # Execute shell script to install Dirb
        subprocess.run(["bash", "install_dirb.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing Dirb:", e)

def run_dirb():
    try:
        # Prompt the user for the URL
        url = input("Enter the URL to scan with Dirb: ")

        # Execute Dirb command using subprocess
        subprocess.run(["dirb", url], check=True)
    except FileNotFoundError:
        print("Dirb is not installed. Installing...")
        install_dirb()
        print("Dirb installed successfully. Running...")
        run_dirb()
    except Exception as e:
        # Handle any other errors
        print("Error running Dirb:", e)

def install_nmap():
    try:
        # Execute shell script to install Nmap
        subprocess.run(["bash", "nmap.sh"], check=True)
    except subprocess.CalledProcessError as e:
        # Handle any errors
        print("Error installing Nmap:", e)

def run_nmap():
    while True:
        try:
            # Execute Nmap command using subprocess
            subprocess.run(["nmap"], check=True)
            break  # Exit loop if Nmap runs successfully
        except FileNotFoundError:
            print("Nmap is not installed. Installing...")
            install_nmap()
            print("Nmap installed successfully. Running...")
        except KeyboardInterrupt:
            print("Exiting Nmap...")
            break  # Exit loop if KeyboardInterrupt is detected
        except Exception as e:
            # Handle any other errors
            print("Error running Nmap:", e)


while(True):
      print("1. SQL Injection\n2. OSINT\n3. Web Vulnerability Scanning\n4. Network Sniffing\n5. network protocol manipulation\n6. Web Directory Sniffer\n7. online account finder\n8. System Scanning\n9. System Scanning2\n10. Web Scanning\n11. Enumerating Device\n12. Vulnerable Exploits\n13. Unix\n14. PrivescCheck\n15. Remote Access a Device\n16. Hping\n17. Nmap\n18. NetCat\n19. Exit")
      print("Please enter the number of the activity that you wish to do from the above: ")
      choice = int(input())
      if choice == 1:
              print("Running SQL Map")
      elif choice == 2:
            print("Choose from the following tools:\n1. Spiderfoot(default)\n2. theHarvester")
            Tool = int(input())
            if Tool == 1:
                      print("Running Spiderfoot")
                      command = "x-terminal-emulator"
                      subprocess.Popen(command)
            elif Tool == 2:
                      print("Running theHarvester")
                      extra = str(input("Please enter the the settings you want for the command: \n\n\n"))
                      dpath = str(os.path.join(os.path.expanduser("~"), "Downloads/theHarvester"))
                      subprocess.call(["python3", "theHarvester.py", extra], cwd=dpath)

      elif choice == 3:
            print("Running Accutenix")
      elif choice == 4:
            print("Running Bettercap")
            run_bettercap()
      elif choice == 5:
            print("Running impacket temporary not available")
      elif choice == 6:
            print("Running Dirb")
            run_dirb()
      elif choice == 7:
            print("Running Sherlock")
            uname = str(input("Please enter the username you want to search: \n\n\n"))
            dpath = str(os.path.join(os.path.expanduser("~"), "Downloads/sherlock/sherlock"))
            subprocess.call(["python3", "sherlock.py", uname], cwd= dpath)
      elif choice == 8:
            print("Running LinPEAS")
      elif choice == 9:
            print("Running LinEnum")
            #command = "x-terminal-emulator"
            #subprocess.Popen(command)
      elif choice == 10:
            print("Running Nikto")
      elif choice == 11:
            print("Running Linux Smart Enumeration")
      elif choice == 12:
            print("Running Linux Exploit Suggester")
            run_linuxexploitsuggester()
      elif choice == 13:
            print("Running Unix Privesc Check")
            
      elif choice == 14:
            print("Running Privesc Check")
      elif choice == 15:
            print("Running Metasploit")
      elif choice == 16:
            print("Running Hping")
      elif choice == 17:
            print("Running Nmap")
            run_nmap()
      elif choice == 18:
            print("Running NetCat")

      elif choice == 19 :
            print("Thank you for using our program!!")
            break
      else:
          print("Invalid input")
